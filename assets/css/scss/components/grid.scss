
$normal : "alg-hits--n-col";
$gridColumns: 5;

$mobileBreakpoint: (0, 550px, "xs", "alg-container--xs", true);
$smallBreakpoint: (550px, 768px, "sm", "alg-container--sm", true);
$mediumBreakpoint: (768px, 992px, "md", "alg-container--md", false);
$largeBreakpoint: (992px, 1240px, "lg", "alg-container--lg", false);
$XlargeBreakpoint: (1240px, 0, "xl", "alg-container--xl", false);

$layoutMap : (
	$mobileBreakpoint, 
	$smallBreakpoint, 
	$mediumBreakpoint, 
	$largeBreakpoint, 
	$XlargeBreakpoint
);


//
// Width of filters and hits parent containers
// on desktop,
//
$filterWidth: 30%;
$hitsContainerWidth: 70%;

@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
}

@mixin breakpoint($min,$max){
	@if $min == 0 {
		@media (max-width: $max) { @content ; }
	} @else if $max == 0 {
		@media (min-width: $min) { @content ; }
	} @else {
		@media (min-width:$min) and (max-width: $max) { @content ; }
	}
}

@function getItemWidth($items, $gutter){
	@if $items == 1{
		@return 100;
	} @else {
		@return (100 - ($items * $gutter)) / $items;
	}
}

@function getPreciseGutter($items,$gutter) {
	@if($items > 2){
		@return (100 - (getItemWidth($items, $gutter) * $items)) / ($items - 1);
	} @else {
		@return 100 - (getItemWidth($items, $gutter) * $items);
	}
}

@mixin smallHit(){
	.alg-hit{
		figure{
			height:185px;
		}

		@include component('hit', 'details') {
			padding: em(10) em(15);
		}

		@include component('hit', 'title') {
			font-size: 20px;
			margin: 0 0 em(5,20) 0;
		}

		@include component('hit', 'description') {
			margin: 0;
		}

		@include component('hit', 'ribbon') {
			font-size: 12px;
		}
	}
}

@include breakpoint(nth($mobileBreakpoint, 1), nth($mobileBreakpoint, 2)) {

	@include smallHit();

	#algolia-search-box{
	 	input {
			font-size: 16px;
			line-height: 36px;
			padding: 10px 0 10px 50px
		}

		.search-icon, .clear-search-icon {
			width:20px;
			height: 20px;
		}

		.search-icon {
			left: 15px;
		}

		.clear-search-icon {
			right: 15px;
		}
	}



	.algolia-only-mobile {
		display: initial !important;
	}

	.algolia-stats {
		text-align: right;
	}
}

@mixin mobileFilters() {
	
	#ais-wrapper #ais-main {
		width: 100%;
	}

	#ais-main {
		
		#algolia-search-box {
			margin-bottom: em(4);
		}
	}

	#algolia-selectors {
	  text-align: left;
	  margin: em(5) 0 em(10) 0;

	  #algolia-stats {
	    line-height: 26px;
	    width: 100%;
	    margin-bottom: 3px;
	  }

	  #algolia-sort-by {
	    float: left;
	  }

	  .algolia-filters {
	    width: 50%;
	    float: left;

	    &:last-child {
	      padding-left: 10px;
	    }

	    &:not(:last-child) {
	      padding-right: 10px;
	    }

	    button, select {
	      width: 100%;
			}
	  }
  }
	#ais-facets{
	  right:0;
    top:0;
    width:60%;
    height:100%;
    opacity: 0;
    transform:translate(100%,0);
    transition: opacity 220ms 100ms ease, transform 300ms cubic-bezier(.4,0,0,1), outline 400ms ease;
    background-color: #FFF;
    position: fixed;
    z-index: 999999;
    outline: 9999px solid rgba(0,0,0,0.5);

    .ais-hierarchical-menu--link,
		.ais-refinement-list--label{
			margin-bottom: 0;
		}

    &.ais-facets--visible {
      transform:translate(0,0);
      transition: outline 900ms ease, transform 400ms cubic-bezier(.4,0,0,1);
      opacity: 1;
    }

    .ais-facets__wrapper {
      height: 100%;
      position: relative;
      overflow:auto;
      
      .ais-facets {
        padding-right: 0;
        margin: 0;
      }

      .ais-hierarchical-menu--header{
        @include facetHeader();
      }

      .ais-hierarchical-menu--item {
        font-size: $listFontSize;
        max-height:42px;
        transition:1200ms linear;
        overflow:hidden; 

        > div > a {
          padding: $listPadding;
        }

        &__active {
          max-height: 400px;

          > div > a {
            color:black;

            .ais-hierarchical-menu--count {
              color: white;
            }
          }
        }

        .ais-hierarchical-menu--count {
          line-height: 14px;
          right: $caretPosition;
        }

        &:not(:last-child) {
          border-bottom: 1px solid $facetMenuColor;
        }
      }

      .ais-hierarchical-menu--list__lvl1 {
        margin-left: 0;

        .ais-hierarchical-menu--item > div > a {
          background-color: lighten(black, 96%);
          
          .ais-hierarchical-menu--count {
            color:#43454b;
          }
        }
        .ais-hierarchical-menu--item__active > div > a {

          .ais-hierarchical-menu--count {
            color:white;
          }
        }
      }

      .ais-hierarchical-menu--link {
        position: relative;
        max-width: 100%;
      }

      .ais-hierarchical-menu--list__lvl0{

      }
      .ais-refinement-list {

        .ais-refinement-list--header {
          @include facetHeader();
        }

        .ais-refinement-list--count {
          right:$caretPosition;
        }

        .ais-refinement-list--item{

          > div > label {
            font-size: $listFontSize;
            padding: $listPadding;
          }

          &__active {
            > div > label {

              .ais-refinement-list--count {
                color:white;
              }
            }
          }
        }
      }

      .ais-range-slider--header{
        @include facetHeader();
      }

      .ais-range-slider--body{
        margin-top: 4px;
        padding: 0 40px 1px 40px;
      }
    }
  }
}


//---------------------------
// 	Generate breakpoint --n-column-<breakpoint> clases
//---------------------------
@for $i from 1 through length($layoutMap) {
  $map: nth($layoutMap, $i);

	.alg-show-on-#{nth($map,3)} {
		display: none !important;
	}

	.#{nth($map,4)} {
		@for $j from 1 through $gridColumns {

		.alg-hide-on-#{nth($map,3)} {
			display: none;
		}

		@if not (nth($map,5)){
			 #ais-main {
		    float: left;
		    width: $hitsContainerWidth;
		  }

		  #ais-facets {
		    width: $filterWidth;
		    float: left;
		  }
		}

		@if(nth($map,5)){
			@include mobileFilters();

			  #ais-main {
			    float: none;
			    width: 100%;
			  }

			  #ais-facets {
			    float: none;
			  }
		}

		.alg-show-on-#{nth($map,3)} {
			display: initial !important;
		}

		.#{str-replace($normal, "--n-col", "--#{$j}-col-#{nth($map,3)}")} {

				.ais-hits--item {
					display: inline-block;
					width: getItemWidth($j, 2)#{"%"};
					margin-right: getPreciseGutter($j, 2)#{"%"};
					@if $j > 1 {
						margin-bottom: getPreciseGutter($j, 2)#{"%"};
					} @else {
						margin-bottom: 15px;
					}

					&:nth-child(#{$j}n) {
						margin-right: 0;
					}
				}
			}
		}
	}
}


